import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

/**
 * Clase PeticionesParser parsea el archivo de peticiones para crear objetos Reservation.
 */
public class PeticionesParser {
    private static final String PETITIONS_FILE = "peticions.txt";

    /**
     * Parsea el archivo de peticiones y crea una lista de objetos Reservation.
     *
     * @return Objeto Peticiones que contiene todas las reservaciones parseadas.
     */
    public Peticiones parsePeticiones() {
        List<Reservation> reservations = new ArrayList<>();
        try (Stream<String> lines = Files.lines(Paths.get(PETITIONS_FILE))) {
            lines.forEach(line -> {
                try {
                    reservations.add(parseLineToReservation(line));
                } catch (IllegalArgumentException e) {
                    System.err.println("Error parsing line: " + line + "; Error: " + e.getMessage());
                }
            });
            return new Peticiones(reservations);
        } catch (IOException e) {
            throw new RuntimeException("Fallo al cargar peticiones: " + e.getMessage(), e);
        }
    }

    private Reservation parseLineToReservation(String line) {
        String[] parts = line.split(",");
        if (parts.length < 6) {
            throw new IllegalArgumentException("Formato de lÃ­nea incorrecto. Esperado: 6 partes, encontrado: " + parts.length);
        }
        return new Reservation(parts[0].trim(), parts[1].trim(), parts[2].trim(), parts[3].trim(), parts[4].trim(), parts[5].trim());
    }
}


